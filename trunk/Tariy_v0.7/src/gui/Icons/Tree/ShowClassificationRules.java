/*
 * ShowClassificationRules.java
 *
 * Created on 15 de enero de 2007, 16:38
 */

package gui.Icons.Tree;

import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collections;
import java.util.LinkedList;
import javax.swing.JTable;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author  and
 */
public class ShowClassificationRules extends javax.swing.JFrame {
    LinkedList rules;
    /** Creates new form ShowClassificationRules */
    public ShowClassificationRules() {
        initComponents();
    }
    
    public ShowClassificationRules(LinkedList rules) {
        initComponents();
        this.rules = rules;
        TreeTableModel model = new TreeTableModel(rules);
        tblRules.setModel(model);
        tblRules.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        this.setOptimalColumnWidth(tblRules);
        this.addJTableHeaderListener();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRules = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        tblRules.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRules);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void addJTableHeaderListener() {
        MouseAdapter mouseListener = new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                TableColumnModel columnModel = tblRules.getColumnModel();
                int viewColumn = columnModel.getColumnIndexAtX(e.getX());
                int column = tblRules.convertColumnIndexToModel(viewColumn);
                if(e.getClickCount() == 1 && column != -1) {
                    if(column == 2) {
                        Collections.sort(rules, new compareClass());
                        tblRules.updateUI();
                    } else if(column == 3) {
                        Collections.sort(rules, new compareConfidence());
                        Collections.sort(rules, new compareFrecuence());
                        tblRules.updateUI();
                    }
                }
            }
        };
        JTableHeader header = tblRules.getTableHeader();
        header.addMouseListener(mouseListener);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShowClassificationRules().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRules;
    // End of variables declaration//GEN-END:variables
    public static void setOptimalColumnWidth(JTable jtable) {
        int            i;
        
        for (i = 0; i < jtable.getColumnModel().getColumnCount(); i++)
            setOptimalColumnWidth(jtable, i);
    }
    
    public static void setOptimalColumnWidth(JTable jtable, int col) {
        int            width;
        TableColumn    column;
        JTableHeader   header;
        
        if ( (col >= 0) && (col < jtable.getColumnModel().getColumnCount()) ) {
            width = calcColumnWidth(jtable, col);
            
            if (width >= 0) {
                header = jtable.getTableHeader();
                column = jtable.getColumnModel().getColumn(col);
                column.setPreferredWidth(width);
                jtable.sizeColumnsToFit(-1);
                header.repaint();
            }
        }
    }
    
    public static int calcColumnWidth(JTable table, int col) {
        int width = calcHeaderWidth(table, col);
        if (width == -1)
            return width;
        
        TableColumnModel columns = table.getColumnModel();
        TableModel data = table.getModel();
        int rowCount = data.getRowCount();
        TableColumn column = columns.getColumn(col);
        try {
            for (int row = rowCount - 1; row >= 0; --row) {
                Component c = table.prepareRenderer(
                        table.getCellRenderer(row, col),
                        row, col);
                width = Math.max(width, c.getPreferredSize().width + 10);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return width;
    }
    public static int calcHeaderWidth(JTable table, int col) {
        if (table == null)
            return -1;
        
        if (col < 0 || col > table.getColumnCount()) {
            System.out.println("invalid col " + col);
            return -1;
        }
        
        JTableHeader header = table.getTableHeader();
        TableCellRenderer defaultHeaderRenderer = null;
        if (header != null) defaultHeaderRenderer = header.getDefaultRenderer();
        TableColumnModel columns = table.getColumnModel();
        TableModel data = table.getModel();
        TableColumn column = columns.getColumn(col);
        int width = -1;
        TableCellRenderer h = column.getHeaderRenderer();
        if (h == null) h = defaultHeaderRenderer;
        if (h != null) {
            // Not explicitly impossible
            Component c = h.getTableCellRendererComponent(
                    table,
                    column.getHeaderValue(),
                    false, false, -1, col);
            width = c.getPreferredSize().width + 5;
        }
        
        return width;
    }
    
}
