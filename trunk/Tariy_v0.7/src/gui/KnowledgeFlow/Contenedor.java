/*
 * Contenedor.java
 *
 * Created on 26 de abril de 2006, 06:09 AM
 */

package gui.KnowledgeFlow;

import gui.Icons.Association.AssociationIcon;
import gui.Icons.Clasification.ClasificationIcon;
import gui.Icons.DBConnection.DBConnectionIcon;
import gui.Icons.File.FileIcon;
import gui.Icons.Filters.FilterIcon;
import gui.Icons.Prediction.PredictionIcon;
import gui.Icons.Rules.RulesIcon;
import gui.Icons.Tree.HierarchicalTreeIcon;
import gui.Icons.Tree.TextTreeIcon;
import gui.Icons.Tree.WekaTreeIcon;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;

/**
 *
 * @author  and
 */
public class Contenedor extends JPanel {
    pnlPreprocesamiento pre;
    pnlAlgoritmos alg;
    pnlVisores vis;
    pnlFilters fil;
    
    //JPanel selector;
    MyCanvas canvas;
    Component presionado;
    private JLabel dragged;
    
    private int backup_select;
    
    /** Creates new form Contenedor */
    public Contenedor() {
        initComponents();
        canvas = new MyCanvas(this);
        pre = new pnlPreprocesamiento(this);
        alg = new pnlAlgoritmos(this);
        vis = new pnlVisores(this);
        fil = new pnlFilters(this);
        
        scrollPanel.setViewportView(canvas);
        scrollSelector.setViewportView(pre);
        contenedor.setLeftComponent(scrollSelector);
        contenedor.setRightComponent(scrollPanel);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        contenedor = new javax.swing.JSplitPane();
        scrollPanel = new javax.swing.JScrollPane();
        scrollSelector = new javax.swing.JScrollPane();

        contenedor.setDividerLocation(170);
        contenedor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                contenedorMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                contenedorMouseReleased(evt);
            }
        });

        scrollPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Work Area", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11), javax.swing.UIManager.getDefaults().getColor("Button.focus")));
        contenedor.setRightComponent(scrollPanel);

        contenedor.setLeftComponent(scrollSelector);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(contenedor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(contenedor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public JLabel getDragged() {
        return dragged;
    }
    
    public void setDragged(JLabel dragged) {
        this.dragged = dragged;
    }
    
    public JSplitPane getContenedor(){
        return contenedor;
    }
    
    public void changeLeftPanel(int select){
        JPanel selector = null;
        switch(select){
            case 0:
                if(backup_select == select){
                    backup_select = -1;
                } else {
                    selector = pre;
                    backup_select = select;
                }
                break;
            case 1:
                if(backup_select == select){
                    backup_select = -1;
                } else {
                    selector = fil;
                    backup_select = select;
                }
                break;
            case 2:
                if(backup_select == select){
                    backup_select = -1;
                } else {
                    selector = alg;
                    backup_select = select;
                }
                break;
            case 3:
                if(backup_select == select){
                    backup_select = -1;
                } else {
                    selector = vis;
                    backup_select = select;
                }
                break;
        }
        if(selector == null){
            contenedor.setDividerLocation(0);
        } else {
            contenedor.setDividerLocation(170);
        }
        scrollSelector.setViewportView(selector);
    }
    
    private void contenedorMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contenedorMouseReleased
// TODO add your handling code here:
        /*System.out.println("Mouse Liberado");
        Point p = evt.getPoint();
        p.x -= (contenedor.getDividerLocation() + contenedor.getDividerSize());
        if(p.x < 0) p.x = 0;
        if(p.y < 0) p.y = 0;
        p.x += scrollPanel.getViewport().getViewPosition().x;
        p.y += scrollPanel.getViewport().getViewPosition().y;
        if(!presionado.getName().equals("otro")){
            String nameIcon = presionado.getName();
            Icon icon = null;
            if(nameIcon.equals("Conexion BD")){
                icon = new DBConnectionIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("EquipAsso")){
                icon = new AssociationIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("FPGrowth")){
                icon = new AssociationIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("Apriori")){
                icon = new AssociationIcon((JLabel)presionado, p.x, p.y);
            } else if (nameIcon.equals("plaintext")) {
                icon = new FileIcon((JLabel) presionado, p.x, p.y);
            } else if(nameIcon.equals("Generador")){
                icon = new RulesIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("updatem")){
                icon = new FilterIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("codification")){
                icon = new FilterIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("removem")){
                icon = new FilterIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("muestra")){
                icon = new FilterIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("remvalor")){
                icon = new FilterIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("rangenum")){
                icon = new FilterIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("discretize")){
                icon = new FilterIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("reduction")){
                icon = new FilterIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("selection")){
                icon = new FilterIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("c45")){
                icon = new ClasificationIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("mate")){
                icon = new ClasificationIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("Hierarchical_Tree")){
                icon = new HierarchicalTreeIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("Weka_Tree")){
                icon = new WekaTreeIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("Text_Tree")){
                icon = new TextTreeIcon((JLabel)presionado, p.x, p.y);
            } else if(nameIcon.equals("Prediction")){
                icon = new PredictionIcon((JLabel)presionado, p.x, p.y);
            } else {
                icon = new Icon((JLabel)presionado, p.x, p.y);
            }
            if(p.x + icon.getPreferredSize().width > canvas.getWidth()){
                canvas.setPreferredSize(new Dimension(p.x + icon.getPreferredSize().width,
                        canvas.getHeight()));
                scrollPanel.setViewportView(canvas);
            }
            if(p.y + icon.getPreferredSize().height > canvas.getHeight()){
                canvas.setPreferredSize(new Dimension(canvas.getWidth(),
                        p.y + icon.getPreferredSize().height));
                scrollPanel.setViewportView(canvas);
            }
            canvas.addIcono(icon);
            icon.setBackground(new Color(0, 0, 0, 0)); //transparencia en el icono.
        }
        repaint();*/
    }//GEN-LAST:event_contenedorMouseReleased
    
    private void contenedorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contenedorMousePressed
// TODO add your handling code here:
//        presionado = contenedor.findComponentAt(evt.getPoint());
//        System.out.println(presionado.getName());
    }//GEN-LAST:event_contenedorMousePressed

    public JScrollPane getScrollPanel() {
        return scrollPanel;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane contenedor;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JScrollPane scrollSelector;
    // End of variables declaration//GEN-END:variables
    
}
