# es_CO

s04=Al acceder a la opcion de configuracion, sobre el \u00e1rea de trabajo \naparece una ventana B, para que el usuario con\ufb01gure el soporte \ndel algoritmo.\n\n\nLa ejecucion de todos los algoritmos de asociacion es similar.\nPara ello, accedemos a la opcion Run del menu contextual.

Algorithm_EquipAsso=Algoritmo EquipAsso

s03=Al ejecutar el algoritmo, su icono cambiara por una animaci\u00f3n, \nas\u00ed como se muestra en B, lo cual indica que el proceso esta \nen ejecucion.\n\nEl tiempo de ejecucion, es proporcional al tam\u00f1o de la base de \ndatos y al numero y tipo de  procesos que dicho algoritmo involucre.\n

s02=Al liberar el icono en el area de trabajo A. es posible conectar los iconos\npor medio de un hilo.\n\nAl hacer click derecho sobre el icono aparece un menu emergente, \nel cual consta de las siguientes opciones\:\n\nLa opci\u00f2n Delete, borra el algoritmo del area de trabajo. \n\nLa opcion Configure, adapta los parametros del algoritmo a las necesidades \ndel analista\n\nLa opcion Run ejecuta la aplicacin del algoritmo.\n\n\nLa configuracion del algoritmes similar en todos los algoritmos de asociacion\ny se realiza de la siguiente manera\:

s01=EquipAsso es un algoritmo de asociacion basado en nuevos \noperadores del Algebra Relacional para Asociaci\u00f3n\n\nOperadores\:\n\nEquikeep (\u03c7)\: Es un operador unario que restringe los valores \nde los atributos de cada una de las tuplas de la relaci\u00f3n R a \nunicamente los valores de los atributos que satisfacen una \nexpresi\u00f3n l\u00f3gica.\n\nAssociator (\u03b1)\: Es un operador algebraico unario que al contrario \ndel operador Selecci\u00f3n o Restricci\u00f3n (\u03c3), aumenta la cardinalidad \no el tama\u00f1o de una relaci\u00f3n ya que genera a partir de cada tupla \nde una relaci\u00f3n, todas las posibles combinaciones de los valores \nde sus atributos, como tuplas de una nueva relaci\u00f3n conservando \nel mismo esquema. \nPor esta raz\u00f3n esta operaci\u00f3n, debe ser posterior a la mayor de \noperaciones en el proceso de optimizaci\u00f3n de una consulta.\n\nEl operador Associator genera, por cada tupla de la relaci\u00f3n R, \ntodos sus posibles subconjuntos (itemsets) de diferente tama\u00f1o. \nAssociator toma cada tupla t de R y dos par\u00e1metros\: \ntam inicial y tam final como entrada, y retorna, por cada tupla t, \nlas diferentes combinaciones de atributos Xi , de tama\u00f1o tam \ninicial hasta tama\u00f1o tam f inal , como tuplas en una nueva relaci\u00f3n. \nEl orden de los atributos en el esquema de R determina los atributos \nen los subconjuntos con valores, el resto se hacen nulos. \nEl tama\u00f1o m\u00e1ximo de un itemset y por consiguiente el tama\u00f1o \n\ufb01nal m\u00e1ximo (tam final ) que se puede tomar como entrada es el \ncorrespondiente al valor del grado de la relaci\u00f3n. \n\nen el primer paso el \nalgoritmo simplemente cuenta el n\u00famero de ocurrencias de \ncada item para determinar los 1-itemsets frecuentes. \n\nEn el subsiguiente paso, con el operador EquiKeep se extraen \nde todas las transacciones los itemsets frecuentes tama\u00f1o 1 \nhaciendo nulos el resto de valores. \n\nLuego se aplica el operador Associator desde Is\=2 hasta el grado n.\n\n\n\nla conexion con otros componentes drag and drop, es similar \nen todos los algoritmos, y se realiza como se muestra a continuacion. \n\n\n\n
