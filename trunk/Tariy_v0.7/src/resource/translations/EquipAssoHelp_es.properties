# defual language

s04=When acceding to the configuration option, on the work area \nappears a window B, so the user can configure the support \nfor the algorithm. \n\n\nThe execution of all the algorithms for association is similar. \nWe accede to the Run option from the contextual menu.

Algorithm_EquipAsso=Algorithm EquipAsso

s03=When executing the algorithm, its icon is changed by an animation, \nas it is in B, which indicates that the process is \nin execution. \n\nthe run time, is proportional to the size of the dat base \nand to the number and type of processes that this algorithm involves. \n 

s02=When releasing the icon in the work area A. is possible to connect the icons \nby means of a thread. \n\nWhen doing raight click on the icon appears an emergent menu, \nwhich consists of the following options \:\n\nthe Delete option, deletes the algorithm icon from the work area. \n\nThe Configure option, adapts the parameters of the algorithm to the necessities \nof the analyst \n\nand the Run option executes the algorithm. \n\n\nthe association algorithms configuration is similar in all of them \nand it gets done as follows\:

s01=EquipAsso es un algoritmo de asociacion basado en nuevos \noperadores del Algebra Relacional para Asociaci\u00f3n\n\nOperadores\:\n\nEquikeep (\u03c7)\: Es un operador unario que restringe los valores \nde los atributos de cada una de las tuplas de la relaci\u00f3n R a \nunicamente los valores de los atributos que satisfacen una \nexpresi\u00f3n l\u00f3gica.\n\nAssociator (\u03b1)\: Es un operador algebraico unario que al contrario \ndel operador Selecci\u00f3n o Restricci\u00f3n (\u03c3), aumenta la cardinalidad \no el tama\u00f1o de una relaci\u00f3n ya que genera a partir de cada tupla \nde una relaci\u00f3n, todas las posibles combinaciones de los valores \nde sus atributos, como tuplas de una nueva relaci\u00f3n conservando \nel mismo esquema. \nPor esta raz\u00f3n esta operaci\u00f3n, debe ser posterior a la mayor de \noperaciones en el proceso de optimizaci\u00f3n de una consulta.\n\nEl operador Associator genera, por cada tupla de la relaci\u00f3n R, \ntodos sus posibles subconjuntos (itemsets) de diferente tama\u00f1o. \nAssociator toma cada tupla t de R y dos par\u00e1metros\: \ntam inicial y tam final como entrada, y retorna, por cada tupla t, \nlas diferentes combinaciones de atributos Xi , de tama\u00f1o tam \ninicial hasta tama\u00f1o tam f inal , como tuplas en una nueva relaci\u00f3n. \nEl orden de los atributos en el esquema de R determina los atributos \nen los subconjuntos con valores, el resto se hacen nulos. \nEl tama\u00f1o m\u00e1ximo de un itemset y por consiguiente el tama\u00f1o \n\ufb01nal m\u00e1ximo (tam final ) que se puede tomar como entrada es el \ncorrespondiente al valor del grado de la relaci\u00f3n. \n\nen el primer paso el \nalgoritmo simplemente cuenta el n\u00famero de ocurrencias de \ncada item para determinar los 1-itemsets frecuentes. \n\nEn el subsiguiente paso, con el operador EquiKeep se extraen \nde todas las transacciones los itemsets frecuentes tama\u00f1o 1 \nhaciendo nulos el resto de valores. \n\nLuego se aplica el operador Associator desde Is\=2 hasta el grado n.\n\n\n\nla conexion con otros componentes drag and drop, es similar \nen todos los algoritmos, y se realiza como se muestra a continuacion. \n\n\n\n
