# defual language

s04=When acceding to the configuration option, on the work area \nappears a window B, so the user can configure the support \nfor the algorithm. \n\n\nThe execution of all the algorithms for association is similar. \nWe accede to the Run option from the contextual menu.

Algorithm_EquipAsso=Algorithm EquipAsso

s03=When executing the algorithm, its icon is changed by an animation, \nas it is in B, which indicates that the process is \nin execution. \n\nthe run time, is proportional to the size of the dat base \nand to the number and type of processes that this algorithm involves. \n 

s02=When releasing the icon in the work area A. is possible to connect the icons \nby means of a thread. \n\nWhen doing raight click on the icon appears an emergent menu, \nwhich consists of the following options \:\n\nthe Delete option, deletes the algorithm icon from the work area. \n\nThe Configure option, adapts the parameters of the algorithm to the necessities \nof the analyst \n\nand the Run option executes the algorithm. \n\n\nthe association algorithms configuration is similar in all of them \nand it gets done as follows\:

s01=EquipAsso is an algorithm for association based on new \noperators of the relational algebra for Association. Operator \n\n: \n\nEquikeep (\ u03c7) \: It is an unary operator that restricts the values \nof the attributes of each one of tuplas of the relation R to \n the values of the attributes that satisfy one \nlogical expression only. \n\nAssociator (\ u03b1) \: is an algebraic operator that contrary \nto the operators Selection or Restriction (\ u03c3), increases the cardinality \nor size of a relation \ndue to generate from each tupla, all the possible combinations of the values \nof its attributes, as tuplas of a new relation conserving \nthe same scheme. \nTherefore this operation, must be subsequent to \ n the operations in the process of query optimization. \n\nAssociator operator generates, for each tupla of the relation R, \nall its possible subgroups (itemsets) of different size. \nAssociator takes each tupla t from R and two parameters \: final size and \ninitial size as input, and returns, for each tupla t, \nthe different attribute combinations Xi, of initial size tam \nuntil final size tam f, as tuplas in a new relation. \nThe attributes order in the scheme R determines the attributes \nin the subgroups with values, the rest become null. \nThe maximum size of itemset and therefore the maximum final size \n(finalsize) that can be taken as input \ncorresponds to the value of the degree of the relation. \n\nIn the first step \nthe algorithm simply tells the number of occurrences of \neach item to determine frequent 1-itemsets. \n\nIn the subsequent step, with EquiKeep operator size 1 frequent itemsets are extracted \nfrom all the transactions \nmaking null the rest of values. \n\nLater the operator Associator is applied from Is \ =2 to degree n. \n\n\n\nThe connection with other drag and drop components is similar \nfor all algorithms, and it gest done as show below. \n\n\n\n

